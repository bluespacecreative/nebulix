---
import BaseLayout from "@layouts/BaseLayout.astro";

const characteers = `a á ạ à ả ã
ă ắ ặ ằ ẳ ẵ
â ấ ậ ầ ẩ ẫ
e é ẹ è ẻ ẽ
ê ế ệ ề ể ễ
i í ị ì ỉ ĩ
o ó ọ ò ỏ õ
ô ố ộ ồ ổ ỗ
ơ ớ ợ ờ ở ỡ
u ú ụ ù ủ ũ
ư ứ ự ừ ử ữ
y ý ỵ ỳ ỷ ỹ
đ`;

const fonts = [
  "tk-maxular-rx",
  "tk-maxular",
  "tk-pelago",
  "tk-ten-mincho-text",
  "tk-patriot",
  "tk-bradley-djr",
  "tk-halyard-text",
  "tk-halyard-micro",
  "tk-halyard-display",
  "tk-best-choice",
  "tk-cartograph-cf",
];
---

<style>
  @import url("https://use.typekit.net/dap1xle.css");
  @import url("https://use.typekit.net/ryj8bhw.css");
  @import url("https://use.typekit.net/kos4nyd.css");
  @import url("https://use.typekit.net/kpv1yci.css");
  @import url("https://use.typekit.net/rnj2bsu.css");
  @import url("https://use.typekit.net/uyd8bbo.css");
  @import url("https://use.typekit.net/mbo0xly.css");

  .fonts-grid {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    width: min(100% - 2rem, 1000px);
    margin-inline: auto;
  }

  section {
    margin-bottom: 1rem;
  }
</style>
<BaseLayout title="Font Preview">
  <div class="fonts-grid mb-3 grid">
    {
      fonts.map((item) => (
        <article class="border border-primary p-3">
          <h1 class="font-bold">{item}</h1>
          <div>
            <section class={item}>{characteers}</section>
            <section class:list={["uppercase", item]}>{characteers}</section>
          </div>
        </article>
      ))
    }
  </div>
</BaseLayout>
<script is:inline>
  (function (d) {
    var config = {
        kitId: "jfe5zbe",
        scriptTimeout: 3000,
        async: true,
      },
      h = d.documentElement,
      t = setTimeout(function () {
        h.className =
          h.className.replace(/\bwf-loading\b/g, "") + " wf-inactive";
      }, config.scriptTimeout),
      tk = d.createElement("script"),
      f = false,
      s = d.getElementsByTagName("script")[0],
      a;
    h.className += " wf-loading";
    tk.src = "https://use.typekit.net/" + config.kitId + ".js";
    tk.async = true;
    tk.onload = tk.onreadystatechange = function () {
      a = this.readyState;
      if (f || (a && a != "complete" && a != "loaded")) return;
      f = true;
      clearTimeout(t);
      try {
        Typekit.load(config);
      } catch (e) {}
    };
    s.parentNode.insertBefore(tk, s);
  })(document);
</script>
